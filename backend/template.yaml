AWSTemplateFormatVersion: 2010-09-09
Description: >-
  LearnerMax Course Backend - Express.js API with Lambda Web Adapter
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Express.js API Function using Lambda Web Adapter
  ExpressApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: run.sh
      Runtime: nodejs22.x
      Architectures:
      - x86_64
      MemorySize: 1024
      Timeout: 30
      Description: Express.js API running on Lambda with Web Adapter
      Environment:
        Variables:
          # Lambda Web Adapter configuration
          AWS_LAMBDA_EXEC_WRAPPER: /opt/bootstrap
          RUST_LOG: info
          PORT: 8080
      Layers:
        # Lambda Web Adapter Layer
        - !Sub arn:aws:lambda:${AWS::Region}:753240598075:layer:LambdaAdapterLayerX86:25
      Events:
        HelloEndpoint:
          Type: Api
          Properties:
            Path: /hello
            Method: GET
            RestApiId: !Ref ApiGatewayApi

  # API Gateway with API Key authentication
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        ApiKeyRequired: true

  # API Key
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
      - ApiGatewayApiProdStage
    Properties:
      Name: !Sub "${AWS::StackName}-api-key"
      Description: API Key for LearnerMax Course Backend
      Enabled: true
      StageKeys:
        - RestApiId: !Ref ApiGatewayApi
          StageName: Prod

  # Usage Plan
  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - ApiGatewayApiProdStage
    Properties:
      UsagePlanName: !Sub "${AWS::StackName}-usage-plan"
      Description: Usage plan for LearnerMax Course Backend
      ApiStages:
        - ApiId: !Ref ApiGatewayApi
          Stage: Prod

  # Link API Key to Usage Plan
  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  ApiKeyId:
    Description: API Key ID
    Value: !Ref ApiKey
  ExpressApiFunction:
    Description: Express API Lambda Function ARN
    Value: !GetAtt ExpressApiFunction.Arn
  ExpressApiFunctionIamRole:
    Description: Implicit IAM Role created for Express API function
    Value: !GetAtt ExpressApiFunctionRole.Arn
# # More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
